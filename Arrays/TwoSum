//Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
//Brute Force -TC-O(N^2) SC-O(1)

vector<int> twoSum(vector<int>& nums, int target) {
        int n=nums.size();
        for(int i=0;i<n;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                if(nums[i]+nums[j]==target)
                {
                    return {i,j};
                }
            }
        }
        return {-1,-1};
    }
    
    
//APPROACH 2(using map)
//TC-O(N) SC-O(N)

 vector<int> twoSum(vector<int>& nums, int target) {
        int n=nums.size();
       unordered_map<int,int> m;
        for(int i=0;i<n;i++)
        {
            int x=nums[i];
            int y=target-x;
            if(m.find(y)!=m.end())
            {
                return {i,m[y]};
            }
            m[nums[i]]=i;
        }
        return {-1,-1};
    }
    
    
//APPROACH 3(2 POINTER APPROACH)
//TC-O(N) SC-O(1)
vector<int> twoSum(vector<int>& nums, int target) {
        int n=nums.size();
        vector<pair<int,int>> v;
        for(int i=0;i<n;i++)
        {
            v.push_back({nums[i],i});
        }
        sort(v.begin(),v.end());
        int s=0,e=n-1;
        while(s<e)
        {
            int sum=v[s].first+v[e].first;
            if(sum==target)
            {
                return {v[s].second,v[e].second};
            }
            else if(sum>target)
            {
                e--;
            }
            else{
                s++;
            }
        }
        return {-1,-1};
    }
